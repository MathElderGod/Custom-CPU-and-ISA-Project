xor r0 r0 // have a NOP to keep the CPU busy
addi r6 2 // 0000 0010
addi r6 2 // 0000 0100
addi r6 2 // 0000 0110
addi r6 1 // 0000 0111
ls r6 -3  // 0011 1000
addi r6 2 // 0011 1010
addi r6 1 // 0011 1011 --> 59, r6 will be used for loading
addi r7 2 // 0000 0010
addi r7 2 // 0000 0100
addi r7 2 // 0000 0110
addi r7 1 // 0000 0111
ls r7 -2  // 0001 1100
addi r7 1 // 0001 1101 --> 29, r7 will be used for storing
xor r0 r0   // this register will hold our p0 test
xor r1 r1   // this register will hold our p8p4p2p1 result
xor r2 r2
xor r3 r3
xor r4 r4 
xor r5 r5   // clear all registers, but our count registers.
ld r2 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
addi r6 -1  // 58
ld r3 r6    // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
andi r2 1   // isolate p8
andi r3 1   // isolate p0
xor r0 r2   // p8
xor r0 r3   // p0 ^ p8
xor r1 r2   // p8
addi r6 1   // 59
ld r2 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
addi r6 -1  // 58
ld r3 r6    // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ls r2 1     // current top byte 0_d11_d10_d9 d8_d7_d6_d5
ls r3 1     // current bottom byte 0_d4_d3_d2 p4_d1_p2_p1
andi r2 1   // isolate d5
andi r3 1   // isolate p1
xor r0 r2   // p0 ^ p8 ^ d5 
xor r0 r3   // p0 ^ p1 ^ p8 ^ d5 
xor r1 r2   // p8 ^ d5
addi r6 1   // 59
ld r2 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
addi r6 -1  // 58
ld r3 r6    // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ls r2 2     // current top byte 0_0_d11_d10_d9 d8_d7_d6
ls r3 2     // current bottom byte 0_0_d4_d3_d2 p4_d1_p2
andi r2 1   // isolate d6
andi r3 1   // isolate p2
xor r0 r2   // p0 ^ p1 ^ p8 ^ d5 ^ d6 
xor r0 r3   // p0 ^ p1 ^ p2 ^ p8 ^ d5 ^ d6 
xor r1 r2   // p8 ^ d5 ^ d6
xor r5 r2   // d6
xor r5 r3   // p2 ^ d6
addi r6 1   // 59
ld r2 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
addi r6 -1  // 58
ld r3 r6    // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ls r2 3     // current top byte    0_0_0_d11 d10_d9_d8_d7
ls r3 3     // current bottom byte 0_0_0_d4  d3_d2_p4_d1
andi r2 1   // isolate d7
andi r3 1   // isolate d1
xor r0 r2   // p0 ^ p1 ^ p2 ^ p8 ^ d5 ^ d6 ^ d7 
xor r0 r3   // p0 ^ p1 ^ p2 ^ p8 ^ d1 ^ d5 ^ d6 ^ d7 
xor r1 r2   // p8 ^ d5 ^ d6 ^ d7
xor r5 r2   // p2 ^ d6 ^ d7
xor r5 r3   // p2 ^ d1 ^ d6 ^ d7
addi r6 1   // 59
ld r2 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
addi r6 -1  // 58
ld r3 r6    // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ls r2 3     
ls r2 1     // current top byte    0_0_0_0   d11_d10_d9_d8
ls r3 3 
ls r3 1     // current bottom byte 0_0_0_0   d4_d3_d2_p4
andi r2 1   // isolate d8
andi r3 1   // isolate p4
xor r0 r2   // p0 ^ p1 ^ p2 ^ p8 ^ d1 ^ d5 ^ d6 ^ d7 ^ d8
xor r0 r3   // p0 ^ p1 ^ p2 ^ p4 ^ p8 ^ d1 ^ d5 ^ d6 ^ d7 ^ d8
xor r1 r2   // p8 ^ d5 ^ d6 ^ d7 ^ d8
xor r4 r2   // d8
xor r4 r3   // p4 ^ d8
addi r6 1   // 59
ld r2 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
addi r6 -1  // 58
ld r3 r6    // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ls r2 3     
ls r2 2     // current top byte    0_0_0_0 0_d11_d10_d9
ls r3 3 
ls r3 2     // current bottom byte 0_0_0_0 0_d4_d3_d2
andi r2 1   // isolate d9
andi r3 1   // isolate d2
xor r0 r2   // p0 ^ p1 ^ p2 ^ p4 ^ p8 ^ d1 ^ d5 ^ d6 ^ d7 ^ d8 ^ d9
xor r0 r3   // p0 ^ p1 ^ p2 ^ p4 ^ p8 ^ d1 ^ d2 ^ d5 ^ d6 ^ d7 ^ d8 ^ d9
xor r1 r2   // p8 ^ d5 ^ d6 ^ d7 ^ d8 ^ d9
xor r4 r2   // p4 ^ d8 ^ d9
xor r4 r3   // p4 ^ d2 ^ d8 ^ d9
addi r6 1   // 59
ld r2 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
addi r6 -1  // 58
ld r3 r6    // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ls r2 3     
ls r2 3     // current top byte    0_0_0_0 0_0_d11_d10
ls r3 3 
ls r3 3     // current bottom byte 0_0_0_0 0_0_d4_d3
andi r2 1   // isolate d10
andi r3 1   // isolate d3
xor r0 r2   // p0 ^ p1 ^ p2 ^ p4 ^ p8 ^ d1 ^ d2 ^ d5 ^ d6 ^ d7 ^ d8 ^ d9 ^ d10
xor r0 r3   // p0 ^ p1 ^ p2 ^ p4 ^ p8 ^ d1 ^ d2 ^ d3 ^ d5 ^ d6 ^ d7 ^ d8 ^ d9 ^ d10
xor r1 r2   // p8 ^ d5 ^ d6 ^ d7 ^ d8 ^ d9 ^ d10
xor r5 r2   // p2 ^ d1 ^ d6 ^ d7 ^ d10
xor r5 r3   // p2 ^ d1 ^ d3 ^ d6 ^ d7 ^ d10
xor r4 r2   // p4 ^ d2 ^ d8 ^ d9 ^ d10
xor r4 r3   // p4 ^ d2 ^ d3 ^ d8 ^ d9 ^ d10
addi r6 1   // 59
ld r2 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
addi r6 -1  // 58
ld r3 r6    // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ls r2 3 
ls r2 3    
ls r2 1     // current top byte    0_0_0_0 0_0_0_d11
ls r3 3 
ls r3 3
ls r3 1     // current bottom byte 0_0_0_0 0_0_0_d4
andi r2 1   // isolate d11
andi r3 1   // isolate d4
xor r0 r2   // p0 ^ p1 ^ p2 ^ p4 ^ p8 ^ d1 ^ d2 ^ d3 ^ d5 ^ d6 ^ d7 ^ d8 ^ d9 ^ d10 ^ d11
xor r0 r3   // p0 ^ p1 ^ p2 ^ p4 ^ p8 ^ d1 ^ d2 ^ d3 ^ d4 ^ d5 ^ d6 ^ d7 ^ d8 ^ d9 ^ d10 ^ d11  ** P0 COMPLETE ** In Register 0
xor r1 r2   // p8 ^ d5 ^ d6 ^ d7 ^ d8 ^ d9 ^ d10 ^ d11                                          ** P8 COMPLETE ** In Register 1
xor r4 r2   // p4 ^ d2 ^ d3 ^ d8 ^ d9 ^ d10 ^ d11
xor r4 r3   // p4 ^ d2 ^ d3 ^ d4 ^ d8 ^ d9 ^ d10 ^ d11                                          ** P4 COMPLETE ** In Register 4
xor r5 r2   // p2 ^ d1 ^ d3 ^ d6 ^ d7 ^ d10 ^ d11
xor r5 r3   // p2 ^ d1 ^ d3 ^ d4 ^ d6 ^ d7 ^ d10 ^ d11                                          ** P2 COMPLETE ** In Register 5
addi r6 1   // 59
ls r1 -1    // 0000 00p80
xor r1 r4   // 0000 00p8p4
ls r1 -1    // 0000 0p8p40
xor r1 r5   // 0000 0p8p4p2
ls r1 -1    // 0000 p8p4p20                                                                     ** P8P4P2_0 ** In Register 1
xor r4 r4 
xor r5 r5   // clear registers 4 and 5
ld r2 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
addi r6 -1  // 58
ld r3 r6    // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ls r2 1     // current top byte 0_d11_d10_d9 d8_d7_d6_d5
ls r3 1     // current bottom byte 0_d4_d3_d2 p4_d1_p2_p1
andi r2 1   // isolate d5
andi r3 1   // isolate p1
xor r4 r2   // d5 
xor r4 r3   // p1 ^ d5
addi r6 1   // 59
ld r2 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
addi r6 -1  // 58
ld r3 r6    // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ls r2 3     // current top byte    0_0_0_d11 d10_d9_d8_d7
ls r3 3     // current bottom byte 0_0_0_d4  d3_d2_p4_d1
andi r2 1   // isolate d7
andi r3 1   // isolate d1
xor r4 r2   // p1 ^ d5 ^ d7
xor r4 r3   // p1 ^ d1 ^ d5 ^ d7
addi r6 1   // 59
ld r2 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
addi r6 -1  // 58
ld r3 r6    // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ls r2 3     
ls r2 2     // current top byte    0_0_0_0 0_d11_d10_d9
ls r3 3 
ls r3 2     // current bottom byte 0_0_0_0 0_d4_d3_d2
andi r2 1   // isolate d9
andi r3 1   // isolate d2
xor r4 r2   // p1 ^ d1 ^ d5 ^ d7 ^ d9
xor r4 r3   // p1 ^ d1 ^ d2 ^ d5 ^ d7 ^ d9
addi r6 1   // 59
ld r2 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
addi r6 -1  // 58
ld r3 r6    // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ls r2 3 
ls r2 3    
ls r2 1     // current top byte    0_0_0_0 0_0_0_d11
ls r3 3 
ls r3 3     
ls r3 1     // current bottom byte 0_0_0_0 0_0_0_d4
andi r2 1   // isolate d11
andi r3 1   // isolate d4
xor r4 r2   // p1 ^ d1 ^ d2 ^ d5 ^ d7 ^ d9 ^ d11
xor r4 r3   // p1 ^ d1 ^ d2 ^ d4 ^ d5 ^ d7 ^ d9 ^ d11                                       ** P1 COMPLETE ** In Register 4
xor r1 r4   // 0000 p8p4p2p1                                                                ** P8P4P2P1 ** In Register 1
xor r4 r4   // clear register 4 -- r2, r3, r4, r5 are all available as of now
addi r6 1   // 59
xor r2 r2   // clear register 2
ld r3 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
ls r3 1     // current top byte 0_d11_d10_d9  d8_d7_d6_d5
ls r3 -3
ls r3 -1    // current top byte d8_d7_d6_d5    0_0_0_0
xor r2 r3   // register now contains d8_d7_d6_d5    0_0_0_0
addi r6 -1  // 58
ld r3 r6    // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ls r3 3
ls r3 2    // current bottom byte 0_0_0_0 0_d4_d3_d2
ls r3 -1   // current bottom byte 0_0_0_0 d4_d3_d2_0
xor r2 r3  // register now contains d8_d7_d6_d5    d4_d3_d2_0
ld r3 r6   // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ls r3 3    // current bottom byte 0_0_0_d4 d3_d2_p4_d1
andi r3 1  // isolate d1    --> 0000 000d1
xor r2 r3  // register now contains d8_d7_d6_d5    d4_d3_d2_d1
beq r0 0 7  // P0 TEST, IF LOW, NO ERROR OR TWO BIT ERROR, ELSE A ONE BIT ERROR
xor r0 r0 // no longer care about the result of p0, so zero it out
xor r2 r2
xor r3 r3
xor r4 r4
xor r5 r5 // clear all registers
j 63 // MAPPED TO LINE 237
xor r0 r0   // NO LONGER CARE ABOUT THE P0 PARITY
addi r6 1   // 59
addi r7 -1  // 28
st r2 r7    // store d8_d7_d6_d5    d4_d3_d2_d1 in M[r7]
addi r7 1   // 29
ld r3 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
ls r3 3
ls r3 2        // 0_0_0_0 0_d11_d10_d9
beq r1 0 12
addi r4 1 // 0000 0001
ls r4 -3
ls r4 -3
ls r4 -1    // 1000 0000
xor r3 r4   // r3 is now 1000 0d11d10d9
st r3 r7    // store 1000 0d11d10d9 in M[r7]
xor r0 r7   // extract the count from r7
beq r0 1 10
addi r6 -2 // 57
addi r7 -2 // 27
j 14       // jump back to the top of our procedure
st r3 r7   // store 0000 0d11d10d9 in M[r7]
xor r0 r7  // extract the count from r7
beq r0 1 4
addi r6 -2 // 57
addi r7 -2 // 27
j 14       // jump back to the top of our procedure
xor r0 r0  // ************************************************** THIS LINE TERMINATES THE PROGRAM *************************************************
xor r0 r1  // r0 holds a copy of r1 ********************* THIS IS THE START OF OUR 1 BIT ERROR CHECK **********************************************
ls r0 3   // r0 now holds only the value of p8. 
addi r6 1   // 59
addi r2 1   // 0000 0001
ls r2 -3 
ls r2 -3    // 0100 0000
beq r0 0 2  // if p8 is zero, then the error is in the lower byte
j 62 // MAPPED TO LINE 285
xor r0 r0 
xor r0 r1   // should contain 0000 0XXX
ld r3 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
ls r3 3
ls r3 2     // load the current top byte 0_0_0_0 0_d11_d10_d9
xor r2 r3   // 0_1_0_0 0_d11_d10_d9
st r2 r7    // store 0100 0d11d10d9 in M[r7]
addi r7 -1  // 28
xor r2 r2
addi r2 1           // 0000 0001
beq r0 0 4          // check the error location
ls r2 -1            // ls once to the left
addi r0 -1          // deduct r0 by 1
j 61                // IS MAPPED TO PC - 3
ld r3 r6            // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
ls r3 1             // current top byte 0_d11_d10_d9 d8_d7_d6_d5
ls r3 -3            
ls r3 -1            // d8_d7_d6_d5 0_0_0_0
addi r6 -1          // 58
ld r4 r6            // load the current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
xor r2 r4           // current bottom byte d4_d3_d2_p4 d1_p2_p1_p0 with corrected potential bit
xor r4 r4
xor r4 r2           // copy of corrected data
ls r4 3
ls r4 2             // 0_0_0_0 0_d4_d3_d2
ls r4 -1            // 0_0_0_0 d4_d3_d2_0
xor r3 r4            // d8_d7_d6_d5 d4_d3_d2_0
xor r4 r4
xor r4 r2           // copy of corrected data
ls r4 3             // 0_0_0_d4 d3_d2_p4_d1
andi r4 1           // isolate d1, which is the corrected bit potentially.
xor r3 r4           // d8_d7_d6_d5 d4_d3_d2_d1
st r3 r7
xor r0 r0
xor r0 r7
beq r0 0 4
addi r6 -1  // 57
addi r7 -1  // 27
j 14        // jump back to the top of our procedure
xor r0 r0   // ************************************************** THIS LINE TERMINATES THE PROGRAM *************************************************
xor r0 r0   // r0 holds a copy of r1 ********************* THIS IS THE START OF OUR 1 BIT ERROR CHECK **********************************************
addi r0 1   // 0000 0001
ls r0 -3    // 0000 1000
xor r0 r1   // should contain 0000 0XXX, as i got rid of p8's location
ld r3 r6    // load the current top byte d11_d10_d9_d8 d7_d6_d5_p8
addi r4 1   // 0000 0001
beq r0 0 4          // check the error location
ls r4 -1            // ls once to the left
addi r0 -1          // deduct r0 by 1
j 61                // IS MAPPED TO PC - 3
xor r3 r4           // r3 now contains the corrected bit d11_d10_d9_d8 d7_d6_d5_p8
xor r4 r4
xor r4 r3           // copy of the corrected data d11_d10_d9_d8 d7_d6_d5_p8
ls r4 3
ls r4 2             // copy of the corrected data 0_0_0_0 0_d11_d10_d9
xor r2 r4           // should now contain 0_1_0_0 0_d11_d10_d9
st r2 r7
addi r6 -1  // 58
addi r7 -1  // 28
ld r4 r6    // current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ld r5 r6    // current bottom byte d4_d3_d2_p4 d1_p2_p1_p0
ls r4 3
ls r4 2     // 0_0_0_0 0_d4_d3_d2
ls r4 -1    // 0_0_0_0 d4_d3_d2_0
ls r5 3     // 0_0_0_d4 d3_d2_p4_d1
andi r5 1   // isolate d1
xor r4 r5   // 0_0_0_0 d4_d3_d2_d1
ls r3 1     // 0_d11_d10_d9 d8_d7_d6_d5
ls r3 -3    
ls r3 -1    // d8_d7_d6_d5 0_0_0_0
xor r3 r4   // d8_d7_d6_d5 d4_d3_d2_d1 POTENTIALLY CORRECTED DATA
st r3 r7    // store r3 in M[r7]
xor r0 r0
xor r0 r7
beq r0 0 4
addi r6 -1  // 57
addi r7 -1  // 27
j 14        // jump back to the top of our procedure
xor r0 r0   // ************************************************** THIS LINE TERMINATES THE PROGRAM *************************************************