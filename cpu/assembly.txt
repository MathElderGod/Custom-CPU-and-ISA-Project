xor r0 r0               // have a nop at the start of the program 
addi r7 1               // 0000 0001
ls r7 -3                // 0000 1000
ls r7 -2                // 0010 0000 -- r7 should contain 32, it will contain the location of our pattern. It will also serve as the pointers to store our information in DM[33-35]
xor r6 r7               // make a copy of r7 into r6
addi r6 -1              // r6 should contain 31, thus it will serve as our main load register for the string bytes
xor r4 r6               // R4 WILL BE A CONSTANT REGISTER TO STRICTLY HOLD THE VALUE 31 AND NOTHING MORE OR NOTHING LESS
ld r5 r7                // load the pattern into r5, this will be our constant register to hold our pattern: a 5-bit pattern in bits [7:3] of datamem[32] X_X_X_X X_0_0_0
ls r5 3                 // The pattern is now in bits [4:0] 0_0_0_X X_X_X_X
addi r7 1               // r7 now holds the value 33. which find the number of times a pattern occurs in a byte data mem[33].
ld r0 r6                // r0 now holds our byte X_X_X_X X_X_X_X
ls r0 -3                // isolate bits [4:0]
ls r0 3                 // 0004 3210
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 60                    // this jump value maps to PC + 2 AKA the pattern did not match, so jump to the first load instruction below, ensuring not to increment the pattern count 
addi r3 1               // r3 will contain our count for the number of patterns we encounter: increment the pattern count
ld r0 r6                // r0 now holds our byte X_X_X_X X_X_X_X
ls r0 -2                // isolate bits [5:1]
ls r0 3                 // 0005 4321
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 60                    // this jump value maps to PC + 2 AKA the pattern did not match, so jump to the first load instruction below, ensuring not to increment the pattern count 
addi r3 1               // r3 will contain our count for the number of patterns we encounter: increment the pattern count
ld r0 r6                // r0 now holds our byte X_X_X_X X_X_X_X
ls r0 -1                // isolate bits [6:2]
ls r0 3                 // 0006 5432
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 60                    // this jump value maps to PC + 2 AKA the pattern did not match, so jump to the first load instruction below, ensuring not to increment the pattern count
addi r3 1               // r3 will contain our count for the number of patterns we encounter: increment the pattern count
ld r0 r6                // r0 now holds our byte X_X_X_X X_X_X_X
ls r0 3                 // isolate bits [7:3]   0007 6543
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 60                    // this jump value maps to PC + 2 AKA the pattern did not match, so jump to the first decrement instruction below, ensuring not to increment the pattern count, but to decrement the memory address as we are done with one byte
addi r3 1               // r3 will contain our count for the number of patterns we encounter: increment the pattern count
xor r0 r0               // clear r0
xor r0 r6               // get a copy of the current memory count into r0
beq r0 0 3              // the count of memory addresses has reached 0, so we now move onto the next portion of our algorithm - the number of times our pattern occurs per byte
addi r6 -1              // we are down one more memory address
j 10                    // jump back to the start of our procedure, as there are more bytes to process.
st r3 r7                // Enter the total number of occurrences of the given 5-bit pattern in any byte into data mem[33]
addi r7 1               // r7 now holds the value 34. The number of bytes within which the pattern occurs data mem[34].
xor r3 r3               // clear our pattern count register. register 0 and 6 should have 0000 0000
xor r6 r4               // go back to data mem[31].
ld r0 r6                // r0 now holds our byte X_X_X_X X_X_X_X
ls r0 -3                // isolate bits [4:0]
ls r0 3                 // 0004 3210
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 59                    // this jump value maps to PC + 8  AKA the pattern did not match, so jump to the next check, ensuring not to increment the pattern count 
addi r3 1               // r3 will contain our count for the number of bytes within which the pattern occurs: increment the pattern count
xor r0 r0               // clear the register r0
xor r0 r6               // get a copy of the current memory count into r0
beq r0 0 3              // if memory is 0, jump out of the loop
addi r6 -1              // we are down one more memory address, we no longer need to check the current byte
j 46                    // go back to the top of the current procedure
j 58                    // 58 is mapped to the our final and last procedure at line: 96
ld r0 r6                // r0 now holds our byte X_X_X_X X_X_X_X
ls r0 -2                // isolate bits [5:1]
ls r0 3                 // 0005 4321
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 59                    // this jump value maps to PC + 8  AKA the pattern did not match, so jump to the next check, ensuring not to increment the pattern count 
addi r3 1               // r3 will contain our count for the number of bytes within which the pattern occurs: increment the pattern count
xor r0 r0               // clear the register r0
xor r0 r6               // get a copy of the current memory count into r0
beq r0 0 3              // if memory is 0, jump out of the loop
addi r6 -1              // we are down one more memory address, we no longer need to check the current byte
j 46                    // go back to the top of the current procedure
j 58                    // 58 is mapped to the our final and last procedure at line: 96
ld r0 r6                // r0 now holds our byte X_X_X_X X_X_X_X
ls r0 -1                // isolate bits [6:2]
ls r0 3                 // 0006 5432
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 59                    // this jump value maps to PC + 8  AKA the pattern did not match, so jump to the next check, ensuring not to increment the pattern count 
addi r3 1               // r3 will contain our count for the number of bytes within which the pattern occurs: increment the pattern count
xor r0 r0               // clear the register r0
xor r0 r6               // get a copy of the current memory count into r0
beq r0 0 3              // if memory is 0, jump out of the loop
addi r6 -1              // we are down one more memory address, we no longer need to check the current byte
j 46                    // go back to the top of the current procedure
j 58                    // 58 is mapped to the our final and last procedure at line: 96
ld r0 r6                // r0 now holds our byte X_X_X_X X_X_X_X
ls r0 3                 // isolate bits [7:3]   0007 6543
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 59                    // this jump value maps to PC + 8  AKA the pattern did not match, so jump to the next check, ensuring not to increment the pattern count 
addi r3 1               // r3 will contain our count for the number of bytes within which the pattern occurs: increment the pattern count
xor r0 r0               // clear the register r0
xor r0 r6               // get a copy of the current memory count into r0
beq r0 0 3              // if memory is 0, jump out of the loop
addi r6 -1              // we are down one more memory address, we no longer need to check the current byte
j 46                    // go back to the top of the current procedure
st r3 r7                // Enter the number of bytes within which the pattern occurs in data mem[34].
addi r7 1               // r7 now holds the value 35. The total number of times the pattern occurs anywhere in the 256 bit string data mem[35]
xor r3 r3               // clear our pattern count register. register 0 and 6 should have 0000 0000
xor r6 r4               // go back to data mem[31].
xor r4 r4               // we no longer need the memory count 31 to be stored in a constant register
ld r0 r6                // r0 now holds our byte X_X_X_X X_X_X_X
ls r0 -3                // isolate bits [4:0]
ls r0 3                 // 0004 3210
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 60                    // this jump value maps to PC + 2 AKA the pattern did not match, so jump to the first load instruction below, ensuring not to increment the pattern count 
addi r3 1               // r3 will contain our count for the number of patterns we encounter: increment the pattern count
ld r0 r6                // r0 now holds our byte X_X_X_X X_X_X_X
ls r0 -2                // isolate bits [5:1]
ls r0 3                 // 0005 4321
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 60                    // this jump value maps to PC + 2 AKA the pattern did not match, so jump to the first load instruction below, ensuring not to increment the pattern count 
addi r3 1               // r3 will contain our count for the number of patterns we encounter: increment the pattern count
ld r0 r6                // r0 now holds our byte X_X_X_X X_X_X_X
ls r0 -1                // isolate bits [6:2]
ls r0 3                 // 0006 5432
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 60                    // this jump value maps to PC + 2 AKA the pattern did not match, so jump to the first load instruction below, ensuring not to increment the pattern count
addi r3 1               // r3 will contain our count for the number of patterns we encounter: increment the pattern count
ld r0 r6                // r0 now holds our byte X_X_X_X X_X_X_X
ls r0 3                 // isolate bits [7:3]   0007 6543
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 60                    // this jump value maps to PC + 2 AKA the pattern did not match, so jump to the first decrement instruction below, ensuring not to increment the pattern count, but to decrement the memory address as we are done with one byte
addi r3 1               // r3 will contain our count for the number of patterns we encounter: increment the pattern count
xor r0 r0               // clear r0
xor r0 r6               // get a copy of the current memory count into r0
beq r0 0 2              // the count of memory addresses has reached 0, so store the pattern count into DM[35] and terminate the program
j 57                    // this jump value maps to PC + 3 AKA the pattern did not match, so jump to the next part of our procdure
st r3 r7                // Store the total number of times the pattern occurs anywhere in the 256 bit string into data mem[35]
xor r2 r2               // ****************************************** THIS LINE TERMINATES THE PROGRAM COMPLETELY **************************************************************************
ld r0 r6                // r0 now holds our upper byte B_B_B_B X_X_X_X. WE WANT OUR B'S TO BE THE BOTTOM MOST BITS
addi r6 -1              // 30
ld r1 r6                // r1 now holds our bottom byte X_X_X_X X_X_X_B WE WANT OUR B'S TO BE THE UPPER MOST BITS
addi r6 1               // 31
ls r0 3
ls r0 1                 // 0000 BBBB
andi r1 1               // 0000 000B
ls r1 -3
ls r1 -1                // 000B 0000
xor r0 r1               // 000B BBBB -- THIS IS NOW 5 BITS WE CAN COMPARE IN THIS CASE BITS [8:4]
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 60                    // this jump value maps to PC + 2 AKA the pattern did not match, so jump to the first load instruction below, ensuring not to increment the pattern count
addi r3 1               // r3 will contain our count for the number of patterns we encounter: increment the pattern count
ld r0 r6                // r0 now holds our upper byte B_B_B_X X_X_X_X. WE WANT OUR B'S TO BE THE BOTTOM MOST BITS
addi r6 -1              // 30
ld r1 r6                // r1 now holds our bottom byte X_X_X_X X_X_B_B WE WANT OUR B'S TO BE THE UPPER MOST BITS
addi r6 1               // 31
ls r0 3
ls r0 2                 // 0000 0BBB
ls r1 -3
ls r1 -3                // BB00 0000
ls r1 3                 // 000B B000
xor r0 r1               // 000B BBBB -- THIS IS NOW 5 BITS WE CAN COMPARE IN THIS CASE BITS [9:5]
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 60                    // this jump value maps to PC + 2 AKA the pattern did not match, so jump to the first load instruction below, ensuring not to increment the pattern count
addi r3 1               // r3 will contain our count for the number of patterns we encounter: increment the pattern count
ld r0 r6                // r0 now holds our upper byte B_B_X_X X_X_X_X. WE WANT OUR B'S TO BE THE BOTTOM MOST BITS
addi r6 -1              // 30
ld r1 r6                // r1 now holds our bottom byte X_X_X_X X_B_B_B WE WANT OUR B'S TO BE THE UPPER MOST BITS
addi r6 1               // 31
ls r0 3
ls r0 3                 // 0000 00BB
ls r1 -3
ls r1 -2                // BBB0 0000
ls r1 3                 // 000B BB00
xor r0 r1               // 000B BBBB -- THIS IS NOW 5 BITS WE CAN COMPARE IN THIS CASE BITS [10:6]
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 60                    // this jump value maps to PC + 2 AKA the pattern did not match, so jump to the first load instruction below, ensuring not to increment the pattern count
addi r3 1               // r3 will contain our count for the number of patterns we encounter: increment the pattern count
ld r0 r6                // r0 now holds our upper byte B_X_X_X X_X_X_X. WE WANT OUR B'S TO BE THE BOTTOM MOST BITS
addi r6 -1              // 30
ld r1 r6                // r1 now holds our bottom byte X_X_X_X B_B_B_B WE WANT OUR B'S TO BE THE UPPER MOST BITS
addi r6 1               // 31
ls r0 3
ls r0 3
ls r0 1                 // 0000 000B
ls r1 -3
ls r1 -1                // BBBB 0000
ls r1 3                 // 000B BBB0
xor r0 r1               // 000B BBBB -- THIS IS NOW 5 BITS WE CAN COMPARE IN THIS CASE BITS [11:7]
xor r0 r5               // check and see if the pattern matches
beq r0 0 2              // if the pattern matches, then the result should be 0 and increment the pattern count by 1
j 60                    // this jump value maps to PC + 2 AKA the pattern did not match, so jump to the first load instruction below, ensuring not to increment the pattern count
addi r3 1               // r3 will contain our count for the number of patterns we encounter: increment the pattern count
addi r6 -1              // decrement the count no matter what
j 56                    // mapped to line 101